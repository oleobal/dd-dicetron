#!/usr/bin/env python3
import discord
import os
import subprocess
from struct import pack
import re

from lib.history import History
from lib.modules import *
from lib.prefixes import *
from lib.dice import *
from lib.util import *
from lib.commands import *


class GlobalContext:
    def __init__(self):
        self.history_command_regex = re.compile(r"^\s*!(!|[0-9]+)\s*$")
        self.remove_backticks_regex = re.compile(
            r"```(.*?)```|`(.*?)`", flags=re.DOTALL
        )
        self.history = History()
        self.available_modules = {}
        self.prefixes = {}
        self.global_prefix = "!dddt"
        self.modules = {}


context = GlobalContext()


def decide_answer_message(message, global_prefix: str, prefixes: dict):
    contents = message.content.split(maxsplit=1)
    first_word = contents[0]
    if not (
        first_word == global_prefix
        or (
            message.guild
            and message.guild.id in prefixes
            and first_word == prefixes[message.guild.id]
        )
    ):
        return False

    if len(contents) == 1:
        return "help"
    else:
        return re.sub(context.remove_backticks_regex, r"\1\2", contents[1].strip())


def dispatch_command(command, prefix, author, channel, guild) -> str:
    def split(cmd):
        contents = cmd.split(maxsplit=1)
        if len(contents) == 1:
            contents.append("")
        return contents

    first_word, rest = split(command)

    if first_word in ["help", "prefix", "module", "history"]:
        return globals()["cmd_" + first_word](
            context, rest, prefix, author, channel, guild
        )

    explain = False
    if first_word == "explain":
        explain = True
        command = rest
        first_word, rest = split(command)

    author_id = b"%x%x" % (author.id, channel.id)
    original_cmd = None
    if match := context.history_command_regex.match(command):
        index = 0 if match.group(1) == "!" else int(match.group(1))
        try:
            original_cmd = command
            command = context.history.get_item(author_id, index)
        except IndexError:
            return f":warning: No history item no.{index}"
    dice_expr, *comment = command.strip().split("#", maxsplit=1)
    went_fine, response = roll_dice(
        dice_expr,
        context.available_modules,
        context.modules.get(guild.id, []),
        explain,
    )
    if original_cmd and original_cmd.strip() != "!!":
        response = "`" + dice_expr.strip() + "` " + response
    response = ("_" + comment[0].strip() + "_ " if comment else "") + response

    if went_fine:
        if not original_cmd:
            context.history.add_item(author_id, command)
    else:
        response = ":warning: " + response
    return response


client = discord.Client(
    activity=discord.Activity(
        name=context.global_prefix, type=discord.ActivityType.listening
    )
)


@client.event
async def on_ready():
    print("We have logged in as {0.user}".format(client))


def reply(message, content):
    return message.channel.send(content, reference=message, mention_author=False)


@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if command := decide_answer_message(
        message, context.global_prefix, context.prefixes
    ):
        prefix = context.prefixes.get(message.guild.id, context.global_prefix)
        cmd_from_history = None

        await reply(
            message,
            dispatch_command(
                command, prefix, message.author, message.channel, message.guild
            ),
        )


def main():
    assert "DD_DISCORD_API_TOKEN" in os.environ
    assert "DD_DICE_PATH" in os.environ

    context.prefixes = load_prefixes()
    context.available_modules = get_available_modules()
    context.modules = load_modules()

    client.run(os.environ["DD_DISCORD_API_TOKEN"])


if __name__ == "__main__":
    main()
