#!/usr/bin/env python3
import discord
import os
import subprocess

client = discord.Client()

@client.event
async def on_ready():
    print('We have logged in as {0.user}'.format(client))

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.content.startswith('!r'):
        if message.content[2:].strip().casefold() == "help":
            await message.channel.send("```\n"+get_dice_help()+"\nText after # is a comment\n```")
            return
        dice_expr, *comment = message.content[2:].split("#", maxsplit=1)
        response = message.author.name+" "+("_"+comment[0].strip()+"_ " if comment else "")+roll_dice(dice_expr)
        await message.channel.send(response)

def get_dice_help():
    p = subprocess.run([os.environ["DD_DICE_PATH"], "--help"], capture_output=True)
    if p.returncode == 0:
        return p.stdout.decode("utf-8")
    else:
        return "Error"

def roll_dice(expr):
    p = subprocess.run([os.environ["DD_DICE_PATH"], "--machine", expr], capture_output=True)
    if p.returncode == 0:
        lines= p.stdout.decode("utf-8").split("\n")
        if len(lines[0])>500:
            lines[0]="[too long]"
        if len(lines[2]) > 0: # error
            return ":warning: "+lines[2]
        return "`"+lines[0]+"`: **"+lines[1]+"**"
    else:
        return "Error"

def main():
    assert "DD_DISCORD_API_TOKEN" in os.environ
    assert "DD_DICE_PATH" in os.environ
    
    client.run(os.environ["DD_DISCORD_API_TOKEN"])

if __name__ == "__main__":
    main()